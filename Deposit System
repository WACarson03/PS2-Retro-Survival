using System.Collections.Generic;
using UnityEngine;
using UnityEngine.InputSystem;
using System.Collections;

public class DepositScript : MonoBehaviour
{
    [Header("Deposit Settings")]
    [SerializeField] private InventoryItemData requiredItem;
    [SerializeField] private int requiredAmount = 5;
    private int currentAmountDeposited = 0;

    [Header("Optional Bookshelf")]
    [SerializeField] private GameObject bookshelfObject; // Assign your bookshelf here
    [SerializeField] private Vector3 slideOffset = new Vector3(3f, 0f, 0f); // Amount to slide
    [SerializeField] private float slideDuration = 1f;

    [SerializeField] private GameObject canvasToDestroy; // Assign the canvas with the text in the Inspector

    private bool bookshelfMoved = false;

    private InventorySystem playerInventory;
    private InventoryDisplay inventoryDisplay;
    private bool playerInArea = false;

    private void OnTriggerEnter(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            playerInArea = true;
            Debug.Log($"[{gameObject.name}] Entered deposit area. Press F to deposit {requiredItem.name}.");
        }
    }

    private void OnTriggerExit(Collider other)
    {
        if (other.CompareTag("Player"))
        {
            playerInArea = false;
            Debug.Log($"[{gameObject.name}] Left deposit area.");
        }
    }

    private void Update()
    {
        if (playerInArea && Keyboard.current.fKey.wasPressedThisFrame)
        {
            DepositOneItem();
        }
    }

    public void SetPlayerInventory(InventorySystem inventory, InventoryDisplay display)
    {
        playerInventory = inventory;
        inventoryDisplay = display;
    }

    private void DepositOneItem()
    {
        if (playerInventory == null)
        {
            Debug.LogWarning("No inventory system found.");
            return;
        }

        if (currentAmountDeposited >= requiredAmount)
        {
            Debug.Log($"[{gameObject.name}] Deposit already complete.");
            return;
        }

        bool removed = playerInventory.RemoveItem(requiredItem, 1);

        if (removed)
        {
            currentAmountDeposited++;
            Debug.Log($"[{gameObject.name}] Deposited 1 {requiredItem.name}. Progress: {currentAmountDeposited}/{requiredAmount}");

            if (inventoryDisplay != null)
            {
                foreach (var slotUI in inventoryDisplay.SlotDictionary.Keys)
                {
                    slotUI.UpdateUISlot();
                }
            }

            if (currentAmountDeposited >= requiredAmount)
            {
                Debug.Log($"[{gameObject.name}] Deposit complete! Secret revealed.");
                TriggerBookshelfSlide();
            }
        }
        else
        {
            Debug.Log($"[{gameObject.name}] You don't have any {requiredItem.name} to deposit.");
        }
    }

    private void TriggerBookshelfSlide()
    {
        if (bookshelfMoved || bookshelfObject == null) return;

        // Destroy the canvas with text
        if (canvasToDestroy != null)
        {
            Destroy(canvasToDestroy);
        }

        Vector3 targetPos = bookshelfObject.transform.position + slideOffset;
        StartCoroutine(SlideBookshelf(bookshelfObject.transform, targetPos, slideDuration));
        bookshelfMoved = true;
    }

    private IEnumerator SlideBookshelf(Transform target, Vector3 toPosition, float duration)
    {
        Vector3 start = target.position;
        float elapsed = 0f;

        while (elapsed < duration)
        {
            target.position = Vector3.Lerp(start, toPosition, elapsed / duration);
            elapsed += Time.deltaTime;
            yield return null;
        }

        target.position = toPosition;
    }
}













