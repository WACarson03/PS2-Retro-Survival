using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using Unity.VisualScripting;

public class PlayerController : MonoBehaviour
{
    // ---------------------- Movement Settings ------------------------
    [Header("Movement Settings")]
    public float moveSpeed = 1f; // Movement speed of the player
    public float rotationSpeed = 10f; // Speed at which player rotates
    private Vector3 moveDirection; // Current direction of movement
    public float turnSmoothTime = 0.1f; // Smoothing time for rotation
    public Transform forwardRelativeToPlayer; // Reference for forward direction
    public float sprintMultiplier = 1.5f; // Multiplier for sprinting speed

    // ---------------------- Combat Settings ------------------------
    [Header("Combat Settings")]
    public float playerDamage = 10f; // Player's damage output
    public Transform attackPoint; // Location from where attacks originate
    public float attackRange = 1.5f; // Range for melee attacks
    public LayerMask attackingLayer; // Layer mask for detecting attackable targets
    private float shootAnimDelay = 0.25f; // Delay before shooting after animation trigger
    private bool isAutomatic; // Flag to check if the weapon is automatic
    private bool isFiring; // Flag to check if player is currently firing
    private float rateOfFire; // Rate of fire for automatic weapons
    private float nextFireTime;
    private bool isAttacking;
    public float timeBetweenMeeleAttacks = 0.5f;
    private Enemy_AI currentTarget;

    [Header("Health system")]
    public float playerHealth; // Player's current health
    public float maxHealth = 100f; // Starting health value
    public float regenerationRate = 1f;
    private float lastDamageTime;
    private Coroutine regenCoroutine;


    // ---------------------- References ------------------------
    [Header("References")]
    public WeaponController weaponController; // Reference to the WeaponController script
    public GameObject bulletPrefab; // Bullet prefab to instantiate when firing
    private GunBase gunBase; // Reference to the current equipped gun
    public Vector3 bulletDirection; // Direction in which the bullet is fired
    private Transform muzzle; // Transform of the gun's muzzle (shooting point)
    public TMP_Text currentAmmoInGunTxt; // UI Text to display ammo in gun
    public TMP_Text playerAmmoTxt; // UI Text to display total ammo

    // ---------------------- Audio -----------------------------
    [Header("Audio")]
    public AudioSource footstepAudioSource;
    public AudioClip footstepClip; // reference to the audio clip
    public float stepInterval = 0.5f; // Time between steps while walking
    public float sprintStepInterval = 0.3f;
    private float currentStepInterval;
    private float stepTimer = 0f;
    public AudioSource gunAudioSource;
    private AudioClip gunShotSFX;
    public AudioClip emptyGunSFX;


    // ---------------------- Animation ------------------------
    private PlayerAnimation playerAnimation; // Reference to player animation script
    private CharacterController characterController; // Character controller for movement handling

    // ---------------------- Initialization ------------------------
    void Start()
    {
        // Initialize player health, animation, controller, and weapon references
        playerHealth = maxHealth;
        playerAnimation = GetComponent<PlayerAnimation>();
        characterController = GetComponent<CharacterController>();
        weaponController = GetComponent<WeaponController>();
        gunBase = weaponController.currentGun;

        // If a gun is equipped, set its firing mode and rate of fire
        if (gunBase != null)
        {
            isAutomatic = weaponController.CheckGunIsAuto(gunBase.gunName);
            
        }
    }

    // ---------------------- Update Loop ------------------------
    void Update()
    {
       
        // If weapon is equipped, update damage based on gun's properties
        if (weaponController.IsWeaponGun())
        {
            if (Input.GetMouseButtonDown(1)) // Right-click to select target
            {
                SelectTarget();
            }

            playerDamage = gunBase.damage;
            gunShotSFX = gunBase.bulletSound;

            // Handle automatic gun fire (if the gun is automatic)
            if (isAutomatic)
            {
                if (Input.GetMouseButton(0) && !isFiring) // Fire while holding mouse button
                {
                    StartCoroutine(AutoFire());
                }
            }
            else // Handle single shot for non-automatic guns
            {
                if (Input.GetMouseButtonDown(0) && !isFiring) // Fire once on mouse click
                {
                    Attack();
                }
            }
        }
        else
        {
            if (Input.GetMouseButtonDown(0)) // Attack with melee if no weapon is equipped
            {
                Attack();
            }
        }

        // Handle player movement as long as not attacking
        if (!isAttacking)
        {
            HandleMovement();
        }
        else
        {
            characterController.Move(Vector3.down * 5f * Time.deltaTime);   
        }
        

        // Reload the weapon if R key is pressed
        if (Input.GetKeyDown(KeyCode.R) && weaponController.currentAmmo < weaponController.maxAmmo)
        {
            weaponController.Reload();
        }

        // Update ammo UI display
        UpdateAmmoUI();
    }

    // ---------------------- Handle Movement ------------------------
    void HandleMovement()
    {
        Vector3 inputDirection = Vector3.zero;
        bool w = Input.GetKey(KeyCode.W);
        bool a = Input.GetKey(KeyCode.A);
        bool d = Input.GetKey(KeyCode.D);

        // Only allow movement with W
        if (w) inputDirection += transform.forward;
        if (d) inputDirection += transform.right;
        if (a) inputDirection -= transform.right;

        bool isSprinting = Input.GetKey(KeyCode.LeftShift);
        float currentSpeed = isSprinting ? moveSpeed * sprintMultiplier : moveSpeed;

        // Player is moving (W is held)
        if (w)
        {
            // Smooth rotation towards movement direction (using A/D to strafe slightly)
            float angle = Mathf.Atan2(inputDirection.x, inputDirection.z) * Mathf.Rad2Deg;
            Quaternion targetRotation = Quaternion.Euler(0f, angle, 0f);
            transform.rotation = Quaternion.Slerp(transform.rotation, targetRotation, rotationSpeed * Time.deltaTime);

            // Apply movement
            Vector3 move = inputDirection.normalized * currentSpeed;
            move.y = -5f;
            characterController.Move(move * Time.deltaTime);
            playerAnimation.UpdateMovementAnimation(currentSpeed);

            //footsteps
            currentStepInterval = isSprinting ? sprintStepInterval : stepInterval;
            stepTimer += Time.deltaTime;
            if(stepTimer >= currentStepInterval)
            {
                PlayFootstepSound();
                stepTimer = 0f;
            }

        }
        else
        {
            // Not moving forward â€” rotate in place with A/D
            float rotateInput = 0f;
            if (a) rotateInput = -1f;
            if (d) rotateInput = 1f;

            if (rotateInput != 0f)
            {
                // Rotate in place (same speed factor, tweak multiplier if needed)
                transform.Rotate(0f, rotateInput * rotationSpeed * 100f * Time.deltaTime, 0f);
            }

            playerAnimation.UpdateMovementAnimation(0);
        }
    }

    // ------------------- Footsteps SFX --------------------
    private void PlayFootstepSound()
    {
        footstepAudioSource.pitch = Random.Range(0.9f, 1.1f);
        footstepAudioSource.PlayOneShot(footstepClip);
    }


    

    // ---------------------- Gun Equipment ------------------------
    public void OnGunEquipped(GunBase newGun)
    {
        // Update the equipped gun and firing properties
        gunBase = newGun;
        isAutomatic = weaponController.CheckGunIsAuto(gunBase.gunName);
        rateOfFire = gunBase.fireRate;
    }

    // ---------------------- Ammo UI Update ------------------------
    public void UpdateAmmoUI()
    {
        // Update ammo display in the UI
        if (weaponController != null)
        {
            int currentAmmo = weaponController.currentAmmo;
            currentAmmoInGunTxt.text = $"{currentAmmo}"; // Display current ammo in the gun
            playerAmmoTxt.text = $"{weaponController.totalAmmo}"; // Display total ammo
        }
    }

    // ---------------------- Take Damage ------------------------
    public void TakeDamage(float damage)
    {
        // Decrease player's health by damage value
        playerHealth -= damage;
        lastDamageTime = Time.time;

        if(regenCoroutine != null)
        {
            StopCoroutine(regenCoroutine);
            regenCoroutine = null;
        }

        if (playerHealth <= 0) // If health reaches zero, trigger death
        {
            Die();
        }
        else
        {
            regenCoroutine = StartCoroutine(WaitAndRegenHealth());
        }
    }

    private IEnumerator WaitAndRegenHealth()
    {
        while(Time.time < lastDamageTime + 10f)
        {
            yield return null;
        }

        regenCoroutine = StartCoroutine(RegenerateHealth());
    }

    private IEnumerator RegenerateHealth()
    {
        while(playerHealth < maxHealth)
        {
            playerHealth += 10f;
            if(playerHealth > maxHealth)
            {
                playerHealth = maxHealth;
            }
            yield return new WaitForSeconds(regenerationRate);
        }

        regenCoroutine = null;
    }

    // ---------------------- Attack ------------------------
    private void Attack()
    {
        bool hasGun = weaponController != null && weaponController.IsWeaponGun();



        if (hasGun)
        {
            if (weaponController.currentAmmo <= 0 && !weaponController.isReloading)
            {
                PlayEmptyGunSFX();
                return;
            }
           

            if (weaponController.isReloading) return; // Don't attack if reloading

            // Decrease ammo and trigger shooting animation
            weaponController.currentAmmo--;
            playerDamage = gunBase.damage;
            playerAnimation.TriggerShoot();

            StartCoroutine(WaitForAnimationAndFire());
        }
        else if(!isAttacking)
        {
            // Melee attack if no weapon is equipped
            isAttacking = true;
            playerAnimation.TriggerAttack();
            Collider[] hits = Physics.OverlapSphere(attackPoint.position, attackRange, attackingLayer);
            foreach (Collider hit in hits)
            {
                Enemy_AI enemy = hit.GetComponent<Enemy_AI>();
                if (enemy != null)
                {
                    enemy.TakeDamage(playerDamage);
                }
            }
            StartCoroutine(ResetMeeleAttack());
        }
    }

    // ------------------ Reset Meele Attack -------------------
    private IEnumerator ResetMeeleAttack()
    {
        yield return new WaitForSeconds(timeBetweenMeeleAttacks);
        isAttacking = false;
    }

    // ---------------------- Auto Fire ------------------------
    private IEnumerator AutoFire()
    {
        if (weaponController.currentAmmo <= 0 && !weaponController.isReloading)
        {
            PlayEmptyGunSFX();
            yield break;

        }

        if (weaponController.isReloading)
        {
            yield return null;
        }

        isFiring = true;

        

        while (Input.GetMouseButton(0)) // Keep firing while mouse button is held down
        {
            if (Time.time >= nextFireTime && !weaponController.isReloading && weaponController.currentAmmo > 0)
            {
                FireBullet();
                nextFireTime = Time.time + rateOfFire;
            }
            yield return null;
        }

        isFiring = false;
    }

    // ---------------------- Wait for Animation and fire for manual ------------------------
    private IEnumerator WaitForAnimationAndFire()
    {
        muzzle = weaponController.GetMuzzleTransform(); // Get muzzle position for firing

        // Find the closest enemy to target
        Enemy_AI targetEnemy = currentTarget;

        if (targetEnemy != null)
        {
            bulletDirection = (targetEnemy.transform.position - muzzle.position).normalized;
            Debug.DrawLine(muzzle.position, targetEnemy.transform.position, Color.red, 2f);
            Vector3 directionToEnemy = (targetEnemy.transform.position - transform.position).normalized;
            directionToEnemy.y = 0f;
            Quaternion targetRotation = Quaternion.LookRotation(directionToEnemy);
            transform.rotation = targetRotation;
        }
        else
        {
            bulletDirection = muzzle.forward; // Default to muzzle's forward direction
        }

        yield return new WaitForSeconds(shootAnimDelay); // Wait for animation to complete

        // Instantiate bullet and set its direction
        GameObject bullet = Instantiate(bulletPrefab, muzzle.position, muzzle.rotation);
        bullet.GetComponent<bulletLogic>().SetDirection(bulletDirection);
        PlayGunShot(gunShotSFX);

        yield return new WaitForSeconds(rateOfFire);
        isFiring = false;  
    }

    private void FireBullet()
    {
        if (weaponController.currentAmmo <= 0 || weaponController.isReloading) return;

        weaponController.currentAmmo--;
        muzzle = weaponController.GetMuzzleTransform();

        // Find the closest enemy to aim at
        Enemy_AI targetEnemy = currentTarget;
        if (targetEnemy != null)
        {
            bulletDirection = (targetEnemy.transform.position - muzzle.position).normalized;
            Vector3 directionToEnemy = (targetEnemy.transform.position - transform.position).normalized;
            directionToEnemy.y = 0f;
            Quaternion targetRotation = Quaternion.LookRotation(directionToEnemy);
            transform.rotation = targetRotation;
        }
        else
        {
            bulletDirection = muzzle.forward;
        }

        GameObject bullet = Instantiate(bulletPrefab, muzzle.position, muzzle.rotation);
        bullet.GetComponent<bulletLogic>().SetDirection(bulletDirection);

        PlayGunShot(gunShotSFX);
        playerAnimation.TriggerShoot();
    }

    private void PlayGunShot(AudioClip gunShot)
    {
        if (gunShot != null && gunAudioSource != null)
        {
            gunAudioSource.pitch = Random.Range(0.95f, 1.05f);
            gunAudioSource.PlayOneShot(gunShot);
        }
    }

    private void PlayEmptyGunSFX()
    {
        gunAudioSource.pitch = Random.Range(0.8f, 1f);
        gunAudioSource.PlayOneShot(emptyGunSFX);
    }

    // ---------------------- Find Closest Enemy ------------------------
    private void SelectTarget()
    {
        Enemy_AI[] enemies = FindObjectsByType<Enemy_AI>(FindObjectsSortMode.None);
        float closestDistance = Mathf.Infinity;
        Enemy_AI closestEnemy = null;

        Vector3 mousePos = Input.mousePosition;

        foreach (Enemy_AI enemy in enemies)
        {
            if (enemy.enemyHealth <= 0) continue;

            Vector3 screenPos = Camera.main.WorldToScreenPoint(enemy.transform.position);
            float dist = Vector2.Distance(mousePos, screenPos);

            if (dist < closestDistance)
            {
                closestDistance = dist;
                closestEnemy = enemy;
            }
        }

        if(currentTarget != null)
        {
            currentTarget.UnselectTargetUI();
            currentTarget = null;
        }
        currentTarget = closestEnemy;
        currentTarget.DisplayTargetedUI();
    }


    // ---------------------- Debugging Gizmos ------------------------
    private void OnDrawGizmosSelected()
    {
        if (attackPoint != null)
        {
            Gizmos.color = Color.blue;
            Gizmos.DrawWireSphere(attackPoint.position, attackRange);
        }
    }

    // ---------------------- Player Death ------------------------
    void Die()
    {
        playerHealth = maxHealth;
        //playerAnimation.TriggerDeath(); // Trigger death animation
        // Handle game over logic here if needed
    }

  
}
